// Mocks generated by Mockito 5.1.0 from annotations
// in tv_shows/test/login_provider_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;
import 'dart:ui' as _i16;

import 'package:dio/dio.dart' as _i3;
import 'package:flutter/cupertino.dart' as _i19;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i6;
import 'package:image_picker/image_picker.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tv_shows/login/credentials_provider.dart' as _i17;
import 'package:tv_shows/login/login/signin_info.dart' as _i11;
import 'package:tv_shows/login/register/register_info.dart' as _i10;
import 'package:tv_shows/networking/auth_info.dart' as _i15;
import 'package:tv_shows/networking/models/user.dart' as _i4;
import 'package:tv_shows/networking/network_repository.dart' as _i8;
import 'package:tv_shows/networking/request_provider/request_state.dart' as _i7;
import 'package:tv_shows/networking/storage_repository.dart' as _i2;
import 'package:tv_shows/shows/util/new_review_info.dart' as _i14;
import 'package:tv_shows/shows/util/review.dart' as _i5;
import 'package:tv_shows/shows/util/reviews_provider.dart' as _i18;
import 'package:tv_shows/shows/util/show.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeStorageRepository_0 extends _i1.Fake
    implements _i2.StorageRepository {}

class _FakeDio_1 extends _i1.Fake implements _i3.Dio {}

class _FakeUser_2 extends _i1.Fake implements _i4.User {}

class _FakeReview_3 extends _i1.Fake implements _i5.Review {}

class _FakeFlutterSecureStorage_4 extends _i1.Fake
    implements _i6.FlutterSecureStorage {}

class _FakeRequestState_5<Value, Error extends Exception> extends _i1.Fake
    implements _i7.RequestState<Value, Error> {}

/// A class which mocks [NetworkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkRepository extends _i1.Mock implements _i8.NetworkRepository {
  MockNetworkRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StorageRepository get storageRepository =>
      (super.noSuchMethod(Invocation.getter(#storageRepository),
          returnValue: _FakeStorageRepository_0()) as _i2.StorageRepository);
  @override
  set storageRepository(_i2.StorageRepository? _storageRepository) => super
      .noSuchMethod(Invocation.setter(#storageRepository, _storageRepository),
          returnValueForMissingStub: null);
  @override
  _i3.Dio get dio =>
      (super.noSuchMethod(Invocation.getter(#dio), returnValue: _FakeDio_1())
          as _i3.Dio);
  @override
  set dio(_i3.Dio? _dio) => super.noSuchMethod(Invocation.setter(#dio, _dio),
      returnValueForMissingStub: null);
  @override
  _i9.Future<_i4.User> registerUser({_i10.RegisterInfo? registerInfo}) =>
      (super.noSuchMethod(
          Invocation.method(#registerUser, [], {#registerInfo: registerInfo}),
          returnValue:
              Future<_i4.User>.value(_FakeUser_2())) as _i9.Future<_i4.User>);
  @override
  _i9.Future<_i4.User> signinUser({_i11.SigninInfo? signinInfo}) =>
      (super.noSuchMethod(
              Invocation.method(#signinUser, [], {#signinInfo: signinInfo}),
              returnValue: Future<_i4.User>.value(_FakeUser_2()))
          as _i9.Future<_i4.User>);
  @override
  _i9.Future<_i4.User> updateEmail({String? email}) =>
      (super.noSuchMethod(Invocation.method(#updateEmail, [], {#email: email}),
              returnValue: Future<_i4.User>.value(_FakeUser_2()))
          as _i9.Future<_i4.User>);
  @override
  _i9.Future<_i4.User> updateImage({_i12.XFile? image}) =>
      (super.noSuchMethod(Invocation.method(#updateImage, [], {#image: image}),
              returnValue: Future<_i4.User>.value(_FakeUser_2()))
          as _i9.Future<_i4.User>);
  @override
  _i9.Future<_i4.User> updateEmailAndImage(
          {String? email, _i12.XFile? image}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #updateEmailAndImage, [], {#email: email, #image: image}),
              returnValue: Future<_i4.User>.value(_FakeUser_2()))
          as _i9.Future<_i4.User>);
  @override
  _i9.Future<List<_i13.Show>> fetchShows() =>
      (super.noSuchMethod(Invocation.method(#fetchShows, []),
              returnValue: Future<List<_i13.Show>>.value(<_i13.Show>[]))
          as _i9.Future<List<_i13.Show>>);
  @override
  _i9.Future<List<_i5.Review>> fetchReviews(String? showId) =>
      (super.noSuchMethod(Invocation.method(#fetchReviews, [showId]),
              returnValue: Future<List<_i5.Review>>.value(<_i5.Review>[]))
          as _i9.Future<List<_i5.Review>>);
  @override
  _i9.Future<_i5.Review> postReview({_i14.NewReviewInfo? reviewInfo}) =>
      (super.noSuchMethod(
              Invocation.method(#postReview, [], {#reviewInfo: reviewInfo}),
              returnValue: Future<_i5.Review>.value(_FakeReview_3()))
          as _i9.Future<_i5.Review>);
}

/// A class which mocks [StorageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageRepository extends _i1.Mock implements _i2.StorageRepository {
  MockStorageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.FlutterSecureStorage get storage => (super.noSuchMethod(
      Invocation.getter(#storage),
      returnValue: _FakeFlutterSecureStorage_4()) as _i6.FlutterSecureStorage);
  @override
  set user(_i4.User? _user) =>
      super.noSuchMethod(Invocation.setter(#user, _user),
          returnValueForMissingStub: null);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i9.Future<void> storeUserInfo(
          _i4.User? _user, Map<String, List<String>>? headerMap) =>
      (super.noSuchMethod(Invocation.method(#storeUserInfo, [_user, headerMap]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void setInfo(_i15.AuthInfo? authInfo) =>
      super.noSuchMethod(Invocation.method(#setInfo, [authInfo]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> checkStorage() =>
      (super.noSuchMethod(Invocation.method(#checkStorage, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  _i9.Future<void> deleteData() =>
      (super.noSuchMethod(Invocation.method(#deleteData, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void addListener(_i16.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i16.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [CredentialsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCredentialsProvider extends _i1.Mock
    implements _i17.CredentialsProvider {
  MockCredentialsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isVisible =>
      (super.noSuchMethod(Invocation.getter(#isVisible), returnValue: false)
          as bool);
  @override
  String get email =>
      (super.noSuchMethod(Invocation.getter(#email), returnValue: '')
          as String);
  @override
  set email(dynamic val) => super.noSuchMethod(Invocation.setter(#email, val),
      returnValueForMissingStub: null);
  @override
  String get password =>
      (super.noSuchMethod(Invocation.getter(#password), returnValue: '')
          as String);
  @override
  set password(dynamic val) =>
      super.noSuchMethod(Invocation.setter(#password, val),
          returnValueForMissingStub: null);
  @override
  bool get canLogin =>
      (super.noSuchMethod(Invocation.getter(#canLogin), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void changeVisibility() =>
      super.noSuchMethod(Invocation.method(#changeVisibility, []),
          returnValueForMissingStub: null);
  @override
  void addListener(_i16.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i16.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [ReviewsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockReviewsProvider extends _i1.Mock implements _i18.ReviewsProvider {
  MockReviewsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get showId =>
      (super.noSuchMethod(Invocation.getter(#showId), returnValue: '')
          as String);
  @override
  set showId(String? _showId) =>
      super.noSuchMethod(Invocation.setter(#showId, _showId),
          returnValueForMissingStub: null);
  @override
  _i7.RequestState<dynamic, Exception> get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeRequestState_5<dynamic, Exception>())
          as _i7.RequestState<dynamic, Exception>);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void updateReviews(
          String? showId, _i8.NetworkRepository? networkRepository) =>
      super.noSuchMethod(
          Invocation.method(#updateReviews, [showId, networkRepository]),
          returnValueForMissingStub: null);
  @override
  _i9.Future<void> executeRequest(
          {_i19.ValueGetter<_i9.Future<dynamic>>? requestBuilder,
          Exception? Function(Exception)? errorHandler}) =>
      (super.noSuchMethod(
          Invocation.method(#executeRequest, [],
              {#requestBuilder: requestBuilder, #errorHandler: errorHandler}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i9.Future<void>);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void reset() => super.noSuchMethod(Invocation.method(#reset, []),
      returnValueForMissingStub: null);
  @override
  void addListener(_i16.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i16.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
